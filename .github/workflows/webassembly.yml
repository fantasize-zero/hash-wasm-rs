name: Rust WebAssembly 包

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 安装 Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: 安装 wasm-pack
        run: cargo install wasm-pack

      - name: 构建 WebAssembly 包 (Web 目标)
        run: wasm-pack build --release --target web --out-dir pkg-web --out-name browser

      - name: 构建 WebAssembly 包 (Node.js 目标)
        run: wasm-pack build --release --target nodejs --out-dir pkg-node --out-name node

      - name: 合并包以支持多环境
        run: |
          # 创建统一包目录
          rm -rf pkg
          mkdir -p pkg

          # 复制 Node.js 版本文件
          cp pkg-node/node.js pkg/
          cp pkg-node/node_bg.wasm pkg/

          # 复制 Web 版本文件
          cp pkg-web/browser.js pkg/
          cp pkg-web/browser_bg.wasm pkg/

          # 复制其他共享文件
          cp pkg-node/.gitignore pkg/
          cp pkg-node/*.d.ts pkg/
          cp pkg-node/README.md pkg/
          cp pkg-node/package.json pkg/package.json

          # 如果有 LICENSE 文件也复制
          if [ -f "pkg-node/LICENSE" ]; then
            cp pkg-node/LICENSE pkg/
          fi

          # 修改 package.json 以支持多环境
          node <<EOF
          const fs = require('fs');
          const path = require('path');

          const pkgPath = path.join(__dirname, 'pkg', 'package.json');
          const pkgData = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));

          // 设置浏览器和模块入口
          pkgData.browser = {
            "./node.js": "./browser.js",
            "./node_bg.wasm": "./browser_bg.wasm"
          };
          pkgData.module = "./browser.js";

          // 添加条件导出
          pkgData.exports = {
            ".": {
              "import": "./browser.js",
              "require": "./node.js",
              "browser": {
                "import": "./browser.js",
                "require": "./browser.js"
              }
            },
            "./package.json": "./package.json"
          };

          // 确保 files 字段包含所有要发布的文件
          // 先确保 files 字段存在且是一个数组
          if (!Array.isArray(pkgData.files)) {
            pkgData.files = [];
          }

          // 添加所有必要的文件到 files 字段
          const requiredFiles = [
            "node.js",
            "node_bg.wasm",
            "browser.js",
            "browser_bg.wasm",
            "*.d.ts",
            "README.md",
            "LICENSE"
          ];

          // 只添加尚未存在的文件
          requiredFiles.forEach(file => {
            if (!pkgData.files.includes(file)) {
              pkgData.files.push(file);
            }
          });

          fs.writeFileSync(pkgPath, JSON.stringify(pkgData, null, 2));
          EOF

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: 检查包版本是否已存在
        id: check-version
        working-directory: pkg
        run: |
          # 获取当前包名和版本
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          # 检查该版本是否已在npm上发布
          if npm view $PACKAGE_NAME@$PACKAGE_VERSION version >/dev/null 2>&1; then
            echo "版本 $PACKAGE_VERSION 已存在，跳过发布"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "版本 $PACKAGE_VERSION 尚未发布，将继续发布"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: 发布到 Node Packages
        if: steps.check-version.outputs.should_publish == 'true'
        working-directory: pkg
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
